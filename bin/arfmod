#! /usr/bin/perl
use strict;
use warnings;

use FindBin;
use lib $FindBin::Bin . '/../lib';
use MCCal;

my $datadir = $MCCal::DATADIR;

=head1 NAME

arfmod - modify an ARF

=head1 SYNOPSIS

arfmod [options] specfile origarf newarf

=head1 DESCRIPTION

Modify an ARF according to estimates of calibration uncertainties.

=head1 OPTIONS

=over 4

=item --speconly

Use only the uncertainties given in C<specfile>.

=item --specrows=s

Comma-separated list of components to use from C<specfile>. By default, every component is used.

=item --help

Show help and exit.

=item --version

Show version and exit.

=back

=head1 AUTHOR

Pete Ratzlaff E<lt>pratzlaff@cfa.harvard.eduE<gt> May 2025

=head1 SEE ALSO

perl(1).

=cut

my $version = '1.0';

use Astro::FITS::CFITSIO;
use Carp;
use Getopt::Long;
use Data::Dumper;
use Log::Any::App '$log', -file => 0;
use MyRDB;
use PDL;
use PDL::GSL::INTERP;
use PDL::GSL::RNG;
use PDL::IO::FlexRaw;

use MCCal::Chandra qw( acis_model_random
		       hrma_model_random
		       aeff_orbit_corr
		       contam_corr
		    );
use MCCal::FITS qw( apply_ratio
		    read_bintbl_cols
		 );
use MCCal::Misc qw( discrete_draw
		    _interpolate
		    gauss_truncated
		    gauss_truncated_one
		    perturb_cspline
		    perturb_none
		    perturb_parabola
		    read_specfile
		    read_twocol_bin
		 );

$PDL::IO::FlexRaw::writeflexhdr = 1;

my $subroutine = (caller(0))[3];

# HISTORY entry for output file
my @argv_copy = @ARGV;
s/'/\\'/g for @argv_copy;
my $history = "$0 ". join(' ', map( { "'$_'" } @argv_copy));

my %default_opts = (
		    extname => 'specresp',

		    # choose a random HRMA contamination layer model
		    hrmacontamrand => 1,

		    # perturb HRMA entry in spec file
		    hrmarand => 1,

		    # yet another HRMA correction
		    aefforbitcorr => 1,

		    # perturb GRATING entry in spec file
		    gratingrand => 1,

		    # perturb filter entry (eg OBFS/UVIS) in spec file
		    filterrand => 1,

		    # OBF transmission models for ACIS-I and ACIS-S
		    acisiobf => $datadir . '/acis/acis_i_xray_trans_1198.bin',
		    acissobf => $datadir . '/acis/acis_s_xray_trans_1198.bin',

		    # choose random acis qe model
		    acisqerand => 1,

		    # the default qe
		    acisqe => $datadir . '/acis/s3_d46.qdp.bin',

		    # perturb detector entry (eg ACISS3) in spec file
		    detrand => 1,

		    # perturb contamination model, if contammodel is
		    # set we use that, otherwise we use the CONTAM entry
		    # in the spec file
		    contamrand => 1,

		    # perturb the obf contamination layer model
		    contammodel => 1,

		    vertexoffset => 'uniform',
		    edgeveto => 1,
		    perturb => 'cspline',
		    spoints => 4, # number of points in cubic spline
		    clip => 1,
		    plog => 0, # perturb log of energy

		    nuabs => 1, # for NuSTAR, perturb nuabs function
		    vignet => 1, # for NuSTAR, perturb vignet function
		    );

my %opts = %default_opts;
GetOptions(\%opts,

	   # Log::Any::App options
	   '--debug!', '--trace!', '--verbose!', '--quiet!', '--log_level!',

	   'help!', 'version!',
	   'speconly!', 'specrows=s',
	   'extname=s', 'edgeveto!', 'hrmacontamrand!',
	   'contamrand!', 'hrmarand!', 'acisqerand!', 'detrand!', 'gratingrand!',
	   'vertexoffset=s', 'perturb=s', 'spoints=i', 'filterrand!',
	   'clip!', 'contamtdep=s', 'contamtau=s', 'contammodel!', 'tstart=f',
	   'plog!', 'aefforbitcorr!',
	   'flexfile=s', 'seed=i',
	   'nustar!', 'nuabs!', 'vignet!',

	   # for Athena, where we want --speconly, but a customized contamination model
	   'pluscontammodel!', 'tausigma=s', 'factortausigma=f',

	   ) or die "Try --help for more information.\n";
$opts{help} and _help();
$opts{version} and _version();

@ARGV == 3 or die "Invalid arguments, try --help for more information\n";

my $specfile = $ARGV[0];
my @infiles = split ',', $ARGV[1];
my @outfiles = split ',', $ARGV[2];

my %perturb_functions = (
			 parabola => \&perturb_parabola,
			 cspline => \&perturb_cspline,
			 none => \&perturb_none,
			 );
exists $perturb_functions{$opts{perturb}} or
  die "unrecognized perturb function '$opts{perturb}'";
my $perturb_function = $perturb_functions{$opts{perturb}};

# set up rng
our $rng = PDL::GSL::RNG->new('default') or croak;
if (exists $opts{seed}) {
  $rng->set_seed( $opts{seed} );
  srand $opts{seed}; # for Perl and PDL random
}
else {
  $rng->set_seed(time ^ ($$ + ($$ << 15)));
  srand;
}

my $ratio;

my $hdr = Astro::FITS::CFITSIO::fits_read_header($infiles[0].'['.$opts{extname}.']');
my ($elo, $ehi) = read_bintbl_cols($infiles[0], qw/ energ_lo energ_hi /, { extname => $opts{extname} });

my $e = 0.5 * ($elo + $ehi);

if ($hdr->{'TELESCOP'} =~ /nustar/i) {
  require MCCal::NuSTAR;
  $ratio = ones($e->nelem);
  $ratio *= MCCal::NuSTAR::perturb_detabs($e) if $opts{nuabs};
  $ratio *= MCCal::NuSTAR::perturb_vignet($e) if $opts{vignet};
  goto OUTPUT;
}

if ($hdr->{'TELESCOP'} !~ /chandra/i and not $opts{speconly}) {
  croak "--speconly required for missons other than Chandra and NuSTAR";
}

my $tstart = $opts{tstart} ? $opts{tstart}+0. : $hdr->{TSTART};

my %spec = read_specfile($specfile);
#print Dumper \%spec; exit;

my @speckeys = qw( emin eminvar emax emaxvar maxdiff edgediff );

my $specrows;

if (!$opts{speconly}) {
  if ($hdr->{INSTRUME} =~ /ACIS/ or $hdr->{DETNAM} =~ /ACIS-\d*7/) {
    $log->infof("%s: reading ACIS-S OBF file '%s'", $subroutine, $opts{acissobf});
    @{$spec{FILTER}}{qw(e trans)} = read_twocol_bin($opts{acissobf});
    @{$spec{FILTER}}{@speckeys} = @{$spec{OBFS}}{@speckeys};

    $log->infof("%s: reading ACIS QE file '%s'", $subroutine, $opts{acisqe});
    @{$spec{DETECTOR}}{qw(e qe)} = read_twocol_bin($opts{acisqe});
    @{$spec{DETECTOR}}{@speckeys} = @{$spec{ACISS3}}{@speckeys};
  }
  elsif ($hdr->{DETNAM} =~ /HRC-S/) {
    $opts{clip} = 0;
    @{$spec{FILTER}}{@speckeys} = @{$spec{UVIS}}{@speckeys};
    @{$spec{DETECTOR}}{@speckeys} = @{$spec{'HRC-S'}}{@speckeys};
  }
  else { croak $hdr->{DETNAM}; }

  if ((!exists $hdr->{GRATING}) or ($hdr->{GRATING} =~ /NONE/)) {
    @{$spec{GRATING}}{@speckeys} = ([])x@speckeys;
  }
  elsif ($hdr->{GRATING} =~ /LETG/) {
    @{$spec{GRATING}}{@speckeys} = @{$spec{LETG}}{@speckeys};
  }
  elsif ($hdr->{GRATING} =~ /HETG/) {
    my $arm = $hdr->{COMMENTS}{GRATING};
    @{$spec{GRATING}}{@speckeys} = @{$spec{$arm}}{@speckeys};
  }
  else { croak "unrecognized grating: ".$hdr->{GRATING}; }

}

# --speconly was specified
else {
  if (exists $opts{specrows}) {
    $specrows = [ map { uc } split(',', $opts{specrows}) ];
  }
}

my $flex;
($ratio, $flex) = arfmod(\%spec, $e, $opts{speconly}, $specrows,);

writeflex($opts{flexfile}, @$flex) if exists $opts{flexfile};

OUTPUT:

for my $i (0..$#infiles) {
  apply_ratio( $infiles[$i], $outfiles[$i], $opts{extname}, $ratio, $history );
}

exit 0;

# returns ratio of perturbed spectral response to actual
sub arfmod {
  $log->debugf("%s: %s", (caller(0))[3], \@_);

  my ($spec, $e, $speconly, $specrows) = @_;

  my $other_corr = ones($e->type, $e->nelem);
  my $hrma_corr = $other_corr->copy;
  my $filter_corr = $other_corr->copy;
  my $detector_corr = $other_corr->copy;
  my $contam_corr = $other_corr->copy;
  my $grating_corr = $other_corr->copy;

  my (@x, @y); # save the perturbation node points

  my $fillcorr = sub {
    $log->infof("%s: %s", (caller(0))[3], \@_);
    my ($key, $corr) = @_;
    my $last;

    defined $spec->{$key}{emin} or
      die "no emin for key $key";

    for my $j (0..$#{$spec->{$key}{emin}}) {
      my $i = which(
		    ( $e >= $spec->{$key}{emin}[$j] ) &
		    ( $e <  $spec->{$key}{emax}[$j] )
		   );
      next unless $i->nelem;
      my ($p, $x, $y) = $perturb_function->($e->index($i),
					    $spec->{$key}{emin}[$j],
					    $spec->{$key}{eminvar}[$j],
					    $spec->{$key}{emax}[$j],
					    $spec->{$key}{emaxvar}[$j],
					    $spec->{$key}{maxdiff}[$j],
					    1,
					    \%opts,
					   );
      (my $tmp = $corr->index($i)) .= $p;
      redo if (
	       $opts{edgeveto} and defined($last) and
	       abs($corr->at($i->at(0))-$last) > $spec->{$key}{edgediff}[$j-1]
	      );

      push @x, $x;
      push @y, $y;

      $last = $corr->at($i->at(-1));
    }
  };

  my ( $hrmacontamrand_index,
       $aefforbitcorr_index,
       $acismodelrandom_index,
     ) = (-1)x3;

  if (not $speconly) {

    # HRMA EA contamination varational model correction
    if ($opts{hrmacontamrand}) {
      my ($hrma_e, $hrma_default_ea, $hrma_ea, $index) = hrma_model_random(rand());
      $_ = _interpolate($e, $hrma_e, $_) for $hrma_default_ea, $hrma_ea;
      carp "negative" if which($hrma_default_ea<0)->nelem;
      $other_corr *= ($hrma_ea / $hrma_default_ea)->badmask(0);
      $hrmacontamrand_index = $index;
    }

    if ($opts{aefforbitcorr}) {
      my ($perb, $index) = aeff_orbit_corr($e);
      $other_corr *= $perb;
      $aefforbitcorr_index = $index;
    }

    # ACIS QE varational model correction
    if (($hdr->{INSTRUME} =~ /ACIS/ or $hdr->{DETNAM} =~ /ACIS/)
      and $opts{acisqerand}
       ) {
      my ($acis_e, $acis_default_qe, $acis_qe, $index) = acis_model_random(rand());
      $_ = _interpolate($e, $acis_e, $_) for $acis_default_qe, $acis_qe;
      $other_corr *= ($acis_qe / $acis_default_qe)->badmask(0);
      $acismodelrandom_index = $index;
    }

    # HRMA ratio
    $fillcorr->('HRMA', $hrma_corr) if $opts{hrmarand};

    # grating ratio
    $fillcorr->('GRATING', $grating_corr) if $opts{gratingrand};

    # filter ratio
    if ($opts{filterrand}) {
      $fillcorr->('FILTER', $filter_corr);
      # do not allow transmission>1
      if ($opts{clip}) {
	my $filter_trans = _interpolate($e, $spec->{FILTER}{e}, $spec->{FILTER}{trans});
	my $index=which($filter_trans*$filter_corr > 1);
	(my $tmp = $filter_corr->index($index))
	  .= 1 / $filter_trans->index($index);
      }
    }

    # QE ratio
    if ($opts{detrand}) {
      $fillcorr->('DETECTOR', $detector_corr);
      # do not allow QE>1
      if ($opts{clip}) {
	my $detector_qe = _interpolate($e, $spec->{DETECTOR}{e}, $spec->{DETECTOR}{qe});
	my $index=which($detector_qe*$detector_corr > 1);
	(my $tmp = $detector_corr->index($index))
	  .= 1 / $detector_qe->index($index);
      }
    }

    # CONTAM correction...
    # ...XMM arf doesn't have detnam keyword, thus exists()
    if ($opts{pluscontammodel} or ((
				  ($hdr->{INSTRUME} =~ /ACIS/ or
				   (exists $hdr->{DETNAM} and $hdr->{DETNAM} =~ /ACIS/)
				  )
				   ) && $opts{contamrand})
       ) {
      if (!$opts{contammodel}) {
	$fillcorr->('CONTAM', $contam_corr);
      } else {
	my $contam_e;
	($contam_e, $contam_corr) = contam_corr($tstart, $perturb_function, \%opts);
	$contam_corr = _interpolate($e, $contam_e, $contam_corr);
      }
    }
  }

  else {
    $specrows = [ keys %$spec ] unless $specrows;
    for my $row (@$specrows) {
      my $tmp_corr = ones($other_corr->nelem);
      $fillcorr->($row, $tmp_corr);
      $other_corr *= $tmp_corr;
    }
  }

  carp "negative values in hrma_corr" if which($hrma_corr<0)->nelem;
  carp "negative values in filter_corr" if which($filter_corr<0)->nelem;
  carp "negative values in detector_corr" if which($detector_corr<0)->nelem;
  carp "negative values in contam_corr" if which($contam_corr<0)->nelem;

  my $x = cat @x;
  my $y = cat @y;

  my $aeff_ratio = $other_corr * $hrma_corr * $filter_corr * $detector_corr * $contam_corr;

  my $indices = ones(short, 3) * -1;
  $indices->set(0, $aefforbitcorr_index);
  $indices->set(1, $hrmacontamrand_index);
  $indices->set(2, $acismodelrandom_index);

  croak if $indices->at(0) > 7;

  return $aeff_ratio, [ $x, $y, $indices, $aeff_ratio ];
}

sub _help {
  exec('perldoc', '-F', $FindBin::Bin . '/' . $FindBin::RealScript);
}

sub _version {
  print $version,"\n";
  exit 0;
}
